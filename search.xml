<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Python Learing（二）：Basic Image Processing]]></title>
      <url>http://polebug.github.io/2016/11/05/Python-Learning%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9ABasic-Image-Processing/</url>
      <content type="html"><![CDATA[<p>&lt;写在前面&gt;<br>Basic image processing 的内容主要是：<br>　　<b>0.（以简单的曲线图为例）对于生成的图进行调整图像参数，使用子图，多个数据集，标题，标签，交互式标注，图例；</b><br>　　<b>1.生成散点图，直方图；</b><br>　　<b>2.简单的图像处理：转换格式，调整尺寸，旋转，复制粘贴图像区域，在图像上绘制点线；</b><br>　　<b>3.灰度变换与直方图均衡化；</b><br>　　<b>4.图像主成分分析<b>(PCA: Principal Component Analysis)；<br>　　<b>5.高斯模糊；</b><br>　　<b>6.计算导数图像；</b><br>　　<b>7.形态学操作：计数与度量功能；</b><br>　　<b>8.图像去噪；</b><br><a id="more"></a></b></b></p>
<p>以上内容主要用了以下几种模块：<br>　　<b>0.PIL </b>(Python Image Library)<br>　　<b>1.NumPy</b><br>　　<b>2.Matplotlib</b><br>　　<b>3.SciPy</b><br>无法安装的话，参考<a href="http://polebug.github.io/2016/11/04/Python%EF%BC%9AModule%20Install%20Issues/">这篇文章</a></p>
<p>其实写这篇文章的时候，我一直在纠结是分模块整理好一些呢，还是将各种模块的功能集于同一个对象进行描述。一开始是尝试着分模块整理的，整理了一段时间发现这样做并不有效，而且提取的实际意义并不大。于是改成同一个对象，如何用python的模板画，这样的方式进行编写。希望之后自己能做一些亦可赛艇的东西丫~</p>
<p>&lt;以下是正文&gt;</p>
<p></p><h2>生成简单的曲线图，并进行基础处理</h2><p></p>
<h3>生成简单的曲线图</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt　　　<span class="comment">#用matplotlib中的plt.plot画线</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np　　　　　　　     <span class="comment">#用numpy　　　　　　　　　</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>,<span class="number">2</span>*np.pi, <span class="number">50</span>)       <span class="comment">#np.linspace定义参数：将在[0,2π]区间生成包含50个元素的数组</span></span><br><span class="line">y = np.sin(x)                        <span class="comment">#使用np.sin()，生成一个正弦函数</span></span><br><span class="line">plt.plot(x, y)                       <span class="comment">#使用plt.plot( , )画线 </span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br><br><h3>调整参数</h3>

<h3>使用子图</h3>

<h3>使用多个数据集</h3>

<h3>显示标题</h3>

<h3>显示标签</h3>

<h3>显示图例</h3>

<h3>使用交互式标注</h3>



<p></p><h2>生成直方图，散点图等基础图像</h2><p></p>
<h3>直方图</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.random.randn(<span class="number">1000</span>)</span><br><span class="line">plt.hist(x, <span class="number">50</span>)                       <span class="comment">#给hist()函数传入一个包含数据的数组，以及代表数据容器的个数</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br><br><h3>散点图</h3>

<p></p><h4>曲线波形图</h4><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">50</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p></p>
<p></p><h4>彩色映射随机散点图</h4><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.random.rand(<span class="number">1000</span>)</span><br><span class="line">y = np.random.rand(<span class="number">1000</span>)</span><br><span class="line">size = np.random.rand(<span class="number">1000</span>) * <span class="number">50</span></span><br><span class="line">colour = np.random.rand(<span class="number">1000</span>)</span><br><span class="line">plt.scatter(x, y, size, colour)</span><br><span class="line">plt.colorbar()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python：Module Install Issues ]]></title>
      <url>http://polebug.github.io/2016/11/04/Python%EF%BC%9AModule%20Install%20Issues/</url>
      <content type="html"><![CDATA[<p>Python里的Module安装过程总有一些奇怪的坑，在此整理一下，以供再遇到此类问题参看<br>（当然如果这篇文章有人看的话，希望能对你有所帮助~）<br>目前碰到的主要是以下几种：<br>　　0.使用PyCharm<br>　　1.easy_install<br>　　2.pip<br>　　3.matplotlib<br><a id="more"></a><br>注：<br>　　安装之前，先添加C:\python27,C:\python27\scripts到PATH里；</p>
<p></p><h2>0.使用PyCharm</h2><br>一直觉得无论是用交互式(python shell)，还是用文本编写(sublime text等)然后命令行run都非常的麻烦。之后被膜法师安利了一波PyCharm，确实是个好用的IDE，如果有学校邮箱还可以申请专业版免费。<br>附上学生版注册的网址 ：<a href="https://www.jetbrains.com/shop/eform/students" target="_blank" rel="external">https://www.jetbrains.com/shop/eform/students</a><br>然后再注册一个JB的账号即可<br>(一本正经的上个图~)<br><img src="http://7x2wrf.com1.z0.glb.clouddn.com/pycharm.png" alt="原图"><p></p>
<p>//settings - Editor - color&amp;fonts - fonts 可更改代码风格(scheme),字体(primary font)<br>//各种方面都满分！</p>
<p></p><h2>1.easy_install</h2><br>easy_install类似与pip,用于装各种module;<br>安装方法：<br>　　打包 <a href="https://bootstrap.pypa.io/ez_setup.py" target="_blank" rel="external">https://bootstrap.pypa.io/ez_setup.py</a> 的代码<br>　　在本地创建.py文件，用命令行打开它：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ez_setup<span class="class">.py</span>                      <span class="comment">//即安装setuptools</span></span><br></pre></td></tr></table></figure><p></p>
<p>需要装module时，输入语句：(以redis为例)</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">easy_install</span> redis</span><br></pre></td></tr></table></figure>
<p></p><h2>2.pip</h2><p></p>
<p><li>pip的安装方法有很多种：<br>(1).使用easy_install进行安装：<br>C:\python27\Scripts\easy_install.exe pip</li></p>
<p>(2).从<a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="external">https://bootstrap.pypa.io/get-pip.py</a> 打包源码，创建.py文件，用命令行打开之后<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span> <span class="built_in">get</span>-pip.<span class="keyword">py</span> install</span><br></pre></td></tr></table></figure></p>
<p>(3)从官网下载 <a href="https://pypi.python.org/pypi/pip#downloads" target="_blank" rel="external">https://pypi.python.org/pypi/pip#downloads</a><br>解压到文件夹之后，从cmd进入<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup<span class="class">.py</span> install</span><br></pre></td></tr></table></figure></p>
<p>//亲测第一种方法是最有效最可靠的<br>//被pip安装坑了很久，一直报出奇怪的错误，如果安装姿势不对，建议把文件夹里的pip文件都删掉，然后重新安装<br>//如果用pip install很慢，建议：在Lib\site-packages\pip修改cmdoptions.py文件中的index_url,将default中的地址改为国内的镜像站，如 <a href="https://pypi.mirrors.ustc.edu.cn/simple" target="_blank" rel="external">https://pypi.mirrors.ustc.edu.cn/simple</a></p>
<p><li>pip使用</li><br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> redis</span><br></pre></td></tr></table></figure></p>
<p></p><h2>Matplotlib</h2><br>安装Matplotlib，直接使用pip是最方便的，或者<a href="http://jaist.dl.sourceforge.net/project/matplotlib/matplotlib/matplotlib-1.3.1/matplotlib-1.3.1.win32-py2.7.exe" target="_blank" rel="external">官网</a>下载，都可以<br>关于Matplotlib依赖的安装，建议看<a href="http://www.cnblogs.com/fantacity/p/4282078.html" target="_blank" rel="external">这篇文章</a><br>//Matplotlib依赖的安装基本没啥坑，可以卡心的画图了~<p></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python Learing（一）：Basic Grammar]]></title>
      <url>http://polebug.github.io/2016/10/21/Python-Learing%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9ABasic-Grammer/</url>
      <content type="html"><![CDATA[<p>装了python2.7，去图书馆借了python入门经典，暂且简单写下学习笔记，以供自己回忆<br>学习笔记（一）主要是基础语法部分：<br>　　1.python中数字以及字符串的使用;<br>　　2.输入与输出语句;<br>　　3.逻辑用语;<br>　　4.循环语句;<br>　　5.列表以及字典的使用;<br>　　6.函数的调用;<br><a id="more"></a></p>
<p>以下为学习笔记（一）正文：</p>
<h2>python中数字的使用</h2><br> <h3>变量类型</h3><br>int,float,string就不说了<br>这里注意下面几种类型的使用：<br>　　<code>long</code>：长整型(不是long long)，最长的数字的长度取决于计算机有多大的内存；<br>　　<code>list</code> ：功能类似于数组，用[]表示，里面的值可以改变；<br>　　<code>tuple</code>：用()表示，里面的值不可以改变；<br>　　<code>dictionary</code>：可列出已经配对的键和值；<br>(查看变量类型，可用type()查看)<br><br><li>支持强制转换变量类型，例如float(2)；</li><br><br><h3>变量命名</h3><br><li>python对于变量名的限制：不能用数字开头，不能过长，不能包括特殊符号(除下划线)；<br></li><li>对于变量命名的特殊点：大多数情况下变量名全部是小写。若不想变量的值被修改，才把变量名全部大写，作为一个常量；<br></li><br><br><h3>数学运算</h3><br>基本运算没见过的就是：floor除法的符号为//，求幂的符号为**；<br>运算优先级以及比较问题就不说了<br><br><h2>python中string的使用</h2>

<li>字符串创建，用‘   ’或者“   ”都可以进行赋值<br></li><li>识别大小写和空格</li>

<p></p><h3>字符串有关的函数使用：</h3><br>　　<code>len()</code>：返回字符串长度；<br>　　<code>.upper()</code>：全部转换成大写；<br>　　<code>.lower()</code>：全部转换成小写；<br>　　<code>.capitalize()</code>：把首字母转换成大写，其余转换成小写；<br>　　<code>.title()</code>：把首字母以及每个空格或者标点符号后的字母转换成大写，其余字母转换成小写；<br>　　<code>is_alpha()</code>：检查一个字符串是否全由字母组成；<br>　　<code>.strip()</code>：<br>　　　　1.删除字符串开头和结尾的所有空格；<br>　　　　2.删除指定的字符，例如：.strip(‘*’)；<br>　　　　3.rstrip()只删除开头的字符；.lstrip()只删除结尾的字符；<br>　　<code>.count(‘   ‘)</code>：返回一个字符串在另一个字符串中出现的次数；<br>　　<code>.find(‘   ‘)</code>：返回某个字符串第一次出现的位置，若没有找到返回-1；<br>　　<code>.replace(‘string1’, ‘string2’)</code>：将string1替换为string2；<br>注：使用这些函数之后，字符串自身的值并未发生改变<p></p>
<p></p><h3>字符串的运算：</h3><p></p>
<li>加法： (string) + (string)<br>　　　　(string) + “   “ +(string)<br></li><li>乘法： (string)*(int)<br>　　　　其中int得是非负整数<br></li><li>不存在减法和除法运算<br><br><h2>处理输入和输出</h2><br><h3>输入：</h3><br>　　<code>input()</code>：用于收集信息，不能接受没有引号括住的字符串；<br>　　<code>raw_input()</code>：用于收集任何非数字的信息，会把用户输入的任何内容都保存为一个字符串；<br>　　　　　　　　　raw_input()函数内还可以加入提示内容；<br>　　这个地方举个例子：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = <span class="function"><span class="title">input</span><span class="params">()</span></span>  <span class="comment">//input的用法</span></span><br><span class="line"><span class="string">"hello world"</span></span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line"><span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; name = <span class="function"><span class="title">raw_input</span><span class="params">(<span class="string">"What is your name?"</span>)</span></span>  <span class="comment">//raw_input()的用法</span></span><br><span class="line">What is your name : Polebug</span><br><span class="line">&gt;&gt;&gt; name</span><br><span class="line">Polebug</span><br></pre></td></tr></table></figure><br><br>　　<code>import语句</code>：允许我们从用户获取信息且同时隐藏用户输入<br>　　举个例子：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; from getpass import getpass</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; my_password = getpass()</span><br><span class="line"><span class="constant">Password</span> <span class="symbol">:</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt;my_password</span><br><span class="line"><span class="string">'hello_world'</span></span><br></pre></td></tr></table></figure><br><br>　　其中，getpass()中可加提示语句。举个例子：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; for getpass import getpass</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; my_password = getpass(<span class="string">"Password, please : "</span>)</span><br><span class="line"><span class="constant">Password</span>, please <span class="symbol">:</span></span><br></pre></td></tr></table></figure><br><br>　　如果getpass()未添加提示语句，则默认输出”Password : “进行提示；<br><br><h3>输出：</h3><br>　　相比于c的输出语句printf(“%d”,…);python是使用{}来确定变量输出的位置；而对于多个{}并列使用时输出顺序，则是由{}的先后，或者是变量，或者是{}中的数字决定。分别举例：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; <span class="constant">Example1</span> = <span class="string">"&#123;&#125;,&#123;&#125;!"</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; a = <span class="string">"Hello"</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; b = <span class="string">"world"</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; print <span class="constant">Example1</span>.format(a, b)</span><br><span class="line"><span class="constant">Hello</span>, world!</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; <span class="constant">Example2</span> = <span class="string">"&#123;first&#125;, &#123;second&#125;!"</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; a = <span class="string">"Hello"</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; b = <span class="string">"world"</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; print <span class="constant">Example2</span>.format(first = a , second = b)</span><br><span class="line"><span class="constant">Hello</span>, world!</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; <span class="constant">Example3</span> = <span class="string">"&#123;0&#125;, &#123;1&#125;!"</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; print <span class="constant">Example3</span>.format(<span class="string">'Hello'</span>, <span class="string">'world'</span>)</span><br><span class="line"><span class="constant">Hello</span>, world!</span><br></pre></td></tr></table></figure><br><br><h2>逻辑用语</h2><br></li><li>if,else以及elif唯一执行第一条为真的语句。<br>　注意一下末尾的冒号。<br></li><li>使用try/except避免错误：用try进行尝试，如果出现程序崩溃，执行except语句（同样需要冒号）<br></li><li><a color="#F92672">注意一下，python中逻辑语句以及循环语句，根据缩进判断执行到哪一句；</a><br></li>

<p></p><h2>循环语句</h2><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同样支持break,continue语句，注意一下缩进</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用range()语句进行循环</span></span><br><span class="line">&gt;&gt;&gt; <span class="function"><span class="title">range</span><span class="params">(<span class="number">7</span>)</span></span>                                            <span class="comment">//for i = 0 ~ 6</span></span><br><span class="line">&gt;&gt;&gt; <span class="function"><span class="title">range</span><span class="params">(<span class="number">1</span>,<span class="number">5</span>)</span></span>                                          <span class="comment">//for i =1 ~ 4</span></span><br><span class="line">&gt;&gt;&gt; <span class="function"><span class="title">range</span><span class="params">(<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>)</span></span>                                        <span class="comment">//for (i=1;i&lt;5;i+=2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//python中的for语句，注意for语句末尾的冒号；</span></span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> <span class="tag">i</span> <span class="keyword">in</span> <span class="function"><span class="title">range</span><span class="params">(<span class="number">1</span>,<span class="number">5</span>)</span></span> :                               <span class="comment">//遍历range</span></span><br><span class="line">...     print <span class="tag">i</span></span><br><span class="line">...</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">&gt;&gt;&gt; Number = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]                                  <span class="comment">//遍历list</span></span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> <span class="tag">i</span> <span class="keyword">in</span> Number :</span><br><span class="line">...     print <span class="string">"The number is : &#123;&#125;"</span>.<span class="function"><span class="title">format</span><span class="params">(i)</span></span></span><br><span class="line">...</span><br><span class="line">The number is : <span class="number">1</span></span><br><span class="line">The number is : <span class="number">2</span></span><br><span class="line">The number is : <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//while语句的使用,跟c++用起来差不多，随便举几个例子</span></span><br><span class="line">&gt;&gt;&gt; while True :</span><br><span class="line">&gt;&gt;&gt; while not Name.<span class="function"><span class="title">isdigit</span><span class="params">()</span></span> :</span><br></pre></td></tr></table></figure><p></p>
<p></p><h2>python中列表的使用</h2><br>python中列表的作用以及操作和c++里的数组很相似，实现和逻辑方面都简单说一下<p></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建列表</span></span><br><span class="line">&gt;&gt;&gt; List = []                                               <span class="comment">//创建空列表</span></span><br><span class="line">&gt;&gt;&gt; List = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]                                   <span class="comment">//创建包含有数字1,2,3,4的列表</span></span><br><span class="line">&gt;&gt;&gt; List = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'four'</span> ]                 <span class="comment">//创建包含有字符串one , two, three, four的列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值的逻辑问题</span></span><br><span class="line">&gt;&gt;&gt; a = <span class="number">1</span>;</span><br><span class="line">&gt;&gt;&gt; b = <span class="number">2</span>;</span><br><span class="line">&gt;&gt;&gt; List = [ a, b ]</span><br><span class="line">&gt;&gt;&gt; a = <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt; List</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用len(),获知列表中有多少项</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">Number</span> = [ <span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> ]</span><br><span class="line">&gt;&gt;&gt; len(<span class="built_in">Number</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用.count()统计所出现的次数 </span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">Number</span> = [<span class="number">1</span> , <span class="number">1</span> , <span class="number">2</span> ]</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">Number</span>.count(<span class="number">1</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用.index()找到某一项在列表的位置，注意一下，引索是从0开始编号</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">Number</span> = [<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> ]</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">Number</span>.index(<span class="number">3</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用.append()往列表里添加项</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">Number</span> = []</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">Number</span>.append(<span class="number">1</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">Number</span></span><br><span class="line">[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用.append()往列表里添加项</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">Number</span> = []</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">Number</span>.append(<span class="number">1</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">Number</span></span><br><span class="line">[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断某项是否在列表里</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">Number</span> = [<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> ]</span><br><span class="line">&gt;&gt;&gt; <span class="number">1</span> <span class="keyword">in</span> <span class="built_in">Number</span></span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; <span class="number">4</span> <span class="keyword">in</span> Numer</span><br><span class="line">False</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用.remove()删除项</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">Number</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">Number</span>.remove(<span class="number">1</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">Number</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用.insert(x, a)将a添加在第x项上</span></span><br><span class="line">&gt;&gt;&gt; Colors = [<span class="string">'red'</span>, <span class="string">'yellow'</span>, <span class="string">'green'</span>]</span><br><span class="line">&gt;&gt;&gt; Colors.remove(<span class="number">1</span>, <span class="string">'orange'</span>)</span><br><span class="line">&gt;&gt;&gt; Colors</span><br><span class="line">[<span class="string">'red'</span>, <span class="string">'orange'</span>, <span class="string">'yellow'</span>, <span class="string">'green'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//列表运算</span></span><br><span class="line">&gt;&gt;&gt; A = [<span class="number">1</span>, <span class="number">2</span> ]</span><br><span class="line">&gt;&gt;&gt; B = [<span class="number">3</span>, <span class="number">4</span> ]</span><br><span class="line">&gt;&gt;&gt; A + B                                   <span class="comment">//两个列表相加</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">&gt;&gt;&gt; A*<span class="number">3</span>                                     <span class="comment">//列表乘以一个常数，列表*列表会报错</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span> ]</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用.reverse()反转列表所有的项的顺序</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">Number</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">Number</span>.reverse()</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">Number</span></span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用.sort()对整数/浮点数/字符串进行升序排列</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">Number</span>.sort()</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较两个列表是否相同，返回True/False；注意一下，判断两个列表是否完全一样，还包括项的顺序的比较</span></span><br><span class="line"><span class="comment">//判断不等于同理</span></span><br><span class="line">&gt;&gt;&gt; Number1 == Number2</span><br><span class="line">False</span><br></pre></td></tr></table></figure>
<p></p><h2>使用字典匹配键和值</h2><br>python中字典的功能有点像哈希表，但相比于c++实现的哈希映射，字典使用起来简单很多<br>字典的使用主要是以下几种：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创造字典</span></span><br><span class="line">&gt;&gt;&gt; states = &#123;&#125;                                                     <span class="comment">//空字典</span></span><br><span class="line">&gt;&gt;&gt; states = &#123;<span class="string">"V"</span>: <span class="string">"R"</span>, <span class="string">"M"</span>: <span class="string">"A"</span>&#125;                                   <span class="comment">//字符串匹配字符串</span></span><br><span class="line">&gt;&gt;&gt; states = &#123;<span class="number">1</span>: <span class="string">"R"</span>, <span class="number">2</span>: <span class="string">"M"</span>&#125;                                       <span class="comment">//数字匹配字符串或字符串匹配数字均可</span></span><br><span class="line">&gt;&gt;&gt; states = &#123;<span class="number">1</span>: <span class="number">2</span>, <span class="number">3</span>: <span class="number">4</span>&#125;                                           <span class="comment">//数字匹配数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//临时添加键和值</span></span><br><span class="line">&gt;&gt;&gt; states = &#123;<span class="string">"V"</span>: <span class="string">"R"</span>&#125;</span><br><span class="line">&gt;&gt;&gt; states [<span class="string">'M'</span>] = <span class="string">'A'</span></span><br><span class="line">&gt;&gt;&gt; states</span><br><span class="line">&#123;<span class="string">'V'</span>: <span class="string">'R'</span>, <span class="string">'M'</span>: <span class="string">'A'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用.pop()删除一个键</span></span><br><span class="line">&gt;&gt;&gt; states.pop(<span class="string">"M"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看字典中是否使用了某个键</span></span><br><span class="line">&gt;&gt;&gt; states.has_key(<span class="string">'M'</span>)                                             <span class="comment">//使用.has_key()查看</span></span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; <span class="string">'M'</span> in states                                                   <span class="comment">//使用关键字in查看</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查看字典中所有的键和所有存储的值</span></span><br><span class="line">&gt;&gt;&gt; states.keys()</span><br><span class="line">&gt;&gt;&gt; states.values()</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较两个字典是否相等时，不根据特定的顺序进行比较</span></span><br></pre></td></tr></table></figure><p></p>
<p>注：如果字典中有两个键相同，但是值不同，查询键时返回最后一个匹配的值<br>举个例子：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; number = &#123;<span class="number">1</span>:<span class="number">2</span>, <span class="number">1</span>:<span class="number">3</span>&#125;</span><br><span class="line">&gt;&gt;&gt; number [<span class="number">1</span>]</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p>
<p></p><h2>python中函数的调用</h2><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//创建一个函数</span><br><span class="line">&gt;&gt;&gt;<span class="function"><span class="keyword">def</span> <span class="title">function_name</span><span class="params">(parameter1, parameter2)</span> :</span></span><br><span class="line">            code</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>function_name(parameter1, parameter2)</span><br><span class="line"></span><br><span class="line">//设置默认值</span><br><span class="line">&gt;&gt;&gt;<span class="function"><span class="keyword">def</span> <span class="title">print_welcome</span><span class="params">(first, last, middle=<span class="string">' '</span>)</span>:</span></span><br><span class="line"><span class="prompt">... </span>        <span class="keyword">print</span> <span class="string">"welcome, &#123;&#125; &#123;&#125; &#123;&#125; !"</span>.format(first, middle, last)</span><br><span class="line">(注意：设置默认值的规则之一是在函数定义中最后定义参数的默认值)</span><br><span class="line"></span><br><span class="line">//返回值</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">return</span> a, b, c</span><br><span class="line"></span><br><span class="line">//在函数内创建的变量不能在函数外引用</span><br><span class="line"></span><br><span class="line">//调用脚本</span><br><span class="line"><span class="keyword">if</span> _name_ == <span class="string">"_main_"</span> :</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line">//使用**kwargs添加到参数列表的末尾，如果存在关键字，将获取用户传递给函数的任何值（kwargs是标准名）</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">args</span><span class="params">(first, **kwargs)</span> :</span></span><br><span class="line"><span class="prompt">... </span>        <span class="keyword">print</span> first</span><br><span class="line"><span class="prompt">... </span>        <span class="keyword">print</span> kwargs</span><br><span class="line">...</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>args (first=<span class="string">"hello"</span>, kwargs=<span class="string">"world"</span>)</span><br><span class="line">hello</span><br><span class="line">&#123;<span class="string">'kwargs'</span> : <span class="string">'world'</span>&#125;</span><br><span class="line"></span><br><span class="line">//使用*args获取任何非关键字的值并保存在一个元组里</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">test_args</span><span class="params">(first, *args)</span> :</span></span><br><span class="line"><span class="prompt">... </span>        <span class="keyword">print</span> first</span><br><span class="line"><span class="prompt">... </span>        <span class="keyword">print</span> args</span><br><span class="line">...</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>args (<span class="string">"hello"</span>,<span class="string">"world"</span>,<span class="string">"!"</span>)</span><br><span class="line">hello</span><br><span class="line">(<span class="string">'world'</span>,<span class="string">'!'</span>)</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>args (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p></p>
<p></p><h2>总结一些容易错误的细节</h2><br>主要是一些习惯问题<p></p>
<p><li> if , else, elif以及创建一个函数时语句末尾有冒号</li></p>
<p><li>注意一下缩进问题</li></p>
<p><li>用and,not,or进行逻辑关系的判断<br>(单引号和双引号的问题并不用太注意)</li></p>
<p>基础语法就学习到这里~<br>(我会继续补充和完善的~如果有错误，欢迎指正)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016多校前的热身赛 1002 Circle Problem]]></title>
      <url>http://polebug.github.io/2016/08/15/2016%E5%A4%9A%E6%A0%A1%E5%89%8D%E7%9A%84%E7%83%AD%E8%BA%AB%E8%B5%9B-1002-Circle-Problem/</url>
      <content type="html"><![CDATA[<p>若有错误的地方，欢迎指正</p>
<p></p><h2>题意</h2><br>&nbsp;&nbsp;&nbsp;&nbsp;突然想想写这题的题解，发现老刘赛后没放出来….不过还好我有随手收藏题的习惯，当时截了图，原题如图所示<br><a id="more"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;（看着有点丑…<br><img src="http://7x2wrf.com1.z0.glb.clouddn.com/QQ%E5%9B%BE%E7%89%8720160815003825.png" alt="原图"><br>&nbsp;&nbsp;&nbsp;&nbsp;题意：给出n个点的坐标，问是否存在一个圆，满足n/3个点都在这个圆上；<p></p>
<p></p><h2>题解</h2><br>&nbsp;&nbsp;&nbsp;&nbsp;思路：显然，枚举三个点，找到一个圆，然后逐一验证是否满足题意的做法会超时。那么：<br>&nbsp;&nbsp;&nbsp;&nbsp;1.考虑优化枚举点的复杂度：假设存在满足题意的圆，那么1/3的点在这个圆上。由于三点确定一个圆，那么找到这个圆的概率为1/3 x 1/3 x 1/3；理论上，随机找三个点有1/27的概率找到这个圆，保险起见我们考虑找500次左右。<br>&nbsp;&nbsp;&nbsp;&nbsp;2.已知三个点的坐标求解圆的方程：推导详见<a href="http://blog.sina.com.cn/s/blog_9d6efbb301018nzh.html" target="_blank" rel="external">此博客</a>，简单的说是消参，对于局部式子设变量求解；<br>&nbsp;&nbsp;&nbsp;&nbsp;3.逐一验证剩余的点即可；<br>&nbsp;&nbsp;&nbsp;&nbsp;4.细节：对于浮点数，取绝对值用fabs；验证点到圆心的距离时，比较精度为1e5，根据提交情况进行调整即可；<p></p>
<p></p><h2>相关算法</h2><p></p>
<p></p><h3>随机化</h3><br>算是学习了一下，用起来很简单：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="preprocessor">#inlcude&lt;ctime&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	srand(time(<span class="number">0</span>));</span><br><span class="line">	<span class="keyword">int</span> x=rand()%n+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p></p><h2>代码如下</h2><br>亲测AC<p></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">double</span> x[<span class="number">30001</span>],y[<span class="number">30001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	freopen(<span class="string">"data.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> T,n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">	    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	    <span class="built_in">memset</span>(x,<span class="number">0</span>,<span class="keyword">sizeof</span>(x));</span><br><span class="line">	    <span class="built_in">memset</span>(y,<span class="number">0</span>,<span class="keyword">sizeof</span>(y));</span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;x[i],&amp;y[i]);</span><br><span class="line">	    srand(time(<span class="number">0</span>));</span><br><span class="line">	    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">	    </span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=<span class="number">500</span>;t++)&#123;</span><br><span class="line">	    	<span class="keyword">int</span> i=rand()%n+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">int</span> j=rand()%n+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">int</span> k=rand()%n+<span class="number">1</span>;</span><br><span class="line">		    <span class="keyword">double</span> a=<span class="number">2</span>*(x[j]-x[i]);</span><br><span class="line">		    <span class="keyword">double</span> b=<span class="number">2</span>*(y[j]-y[i]);</span><br><span class="line">		    <span class="keyword">double</span> c=x[j]*x[j]+y[j]*y[j]-x[i]*x[i]-y[i]*y[i];</span><br><span class="line">		    <span class="keyword">double</span> d=<span class="number">2</span>*(x[k]-x[j]);</span><br><span class="line">		    <span class="keyword">double</span> e=<span class="number">2</span>*(y[k]-y[j]);</span><br><span class="line">		    <span class="keyword">double</span> f=x[k]*x[k]+y[k]*y[k]-x[j]*x[j]-y[j]*y[j];</span><br><span class="line">		    <span class="keyword">double</span> x0=(b*f-e*c)/(b*d-e*a);</span><br><span class="line">		    <span class="keyword">double</span> y0=(d*c-a*f)/(b*d-e*a);</span><br><span class="line">		    <span class="keyword">double</span> r=<span class="built_in">sqrt</span>((x0-x[i])*(x0-x[i])+(y0-y[i])*(y0-y[i]));</span><br><span class="line">			<span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line">	        </span><br><span class="line">	        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">	        	<span class="keyword">double</span> d2=<span class="built_in">sqrt</span>((x[i] - x0) * (x[i] - x0) + (y[i] - y0) * (y[i] - y0));</span><br><span class="line">	        	<span class="keyword">if</span>(<span class="built_in">abs</span>(d2 - r) &lt;= <span class="number">1e-5</span>) tot++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">int</span> judge=n/<span class="number">3</span>;</span><br><span class="line">			<span class="keyword">if</span>(judge&lt;=tot)&#123;</span><br><span class="line">				flag=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">"YOUGE\n"</span>); <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NIUGE\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HDOJ 5726 GCD (16多校day1 1004)]]></title>
      <url>http://polebug.github.io/2016/08/14/HDOJ-5726-GCD-16%E5%A4%9A%E6%A0%A1day1-1004/</url>
      <content type="html"><![CDATA[<p>若有错误的地方，欢迎指正</p>
<p></p><h2>题意</h2><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5726" target="_blank" rel="external">题目传送门</a><br>&nbsp;&nbsp;&nbsp;&nbsp;题意：给出n个数，做m次询问。对于所给区间，找出[l,r]的gcd(最大公约数)，求出1~n中，区间的gcd与之相等的区间个数。<br><a id="more"></a><p></p>
<p></p><h2>题解</h2><br>思路：<br>&nbsp;&nbsp;&nbsp;&nbsp;首先根据数据范围，对于区间的gcd值的维护，考虑线段树或RMQ；<br>&nbsp;&nbsp;&nbsp;&nbsp;然后，对于所有区间的gcd，我们需要预处理出来。具体实现：考虑枚举左端点，二分区间（注意gcd值单调），算出以这个点为左端点的区间有哪些gcd值，用map记录下相同gcd的区间个数；<p></p>
<p></p><h2>相关算法参考</h2><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://polebug.science/2016/08/13/%E5%AF%B9%E4%BA%8ERMQ%E9%97%AE%E9%A2%98%E7%9A%84%E7%90%86%E8%A7%A3%E5%8F%8A%E8%BF%90%E7%94%A8/" target="_blank" rel="external">RMQ算法的ST算法</a><br>&nbsp;&nbsp;&nbsp;&nbsp;二分<p></p>
<p></p><h2>代码</h2><br>亲测AC<p></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn=<span class="number">100000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="built_in">map</span> &lt;<span class="keyword">int</span> , <span class="keyword">long</span> <span class="keyword">long</span>&gt; Q;</span><br><span class="line"><span class="keyword">int</span> dp[Maxn][<span class="number">20</span>],a[Maxn],T,n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b,a%b); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RMQ</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; <span class="comment">//用RMQ维护区间gcd值； </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) dp[i][<span class="number">0</span>]=a[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=n;j++)</span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)-<span class="number">1</span>&lt;=n;i++) </span><br><span class="line">		dp[i][j]=gcd(dp[i][j-<span class="number">1</span>],dp[i+(<span class="number">1</span>&lt;&lt;(j-<span class="number">1</span>))][j-<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="comment">//询问区间gcd值； </span></span><br><span class="line">	<span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>((<span class="number">1</span>&lt;&lt;(tmp+<span class="number">1</span>))&lt;=r-l+<span class="number">1</span>) tmp++;</span><br><span class="line">	<span class="keyword">return</span> gcd(dp[l][tmp],dp[r-(<span class="number">1</span>&lt;&lt;tmp)+<span class="number">1</span>][tmp]);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123; <span class="comment">//二分区间预处理； </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> j=i;</span><br><span class="line">		<span class="keyword">while</span>(j&lt;=n)&#123;</span><br><span class="line">			<span class="keyword">int</span> l=j,r=n,sum;</span><br><span class="line">			<span class="keyword">int</span> x=query(i,j);</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">while</span>(r&gt;=l)&#123;</span><br><span class="line">				<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span>(query(i,mid) == x)&#123;</span><br><span class="line">					sum=mid;</span><br><span class="line">					l=mid+<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> r=mid-<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			Q[x]+=sum-j+<span class="number">1</span>;<span class="comment">//记录下以x为gcd值的区间个数 </span></span><br><span class="line">			j=sum+<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("data.txt","r",stdin);</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=T;k++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		Q.clear();</span><br><span class="line">		<span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">		</span><br><span class="line">		RMQ(n);</span><br><span class="line">		solve();	</span><br><span class="line">		</span><br><span class="line">	    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">	    <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>,k);</span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">	    	<span class="keyword">int</span> l,r;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d %I64d\n"</span>,query(l,r),Q[query(l,r)]);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[对于RMQ问题的ST算法的理解及运用]]></title>
      <url>http://polebug.github.io/2016/08/13/%E5%AF%B9%E4%BA%8ERMQ%E9%97%AE%E9%A2%98%E7%9A%84%E7%90%86%E8%A7%A3%E5%8F%8A%E8%BF%90%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>裸算法系列<br><a id="more"></a></p>
<p></p><h1>Problem Description</h1><br>&nbsp;&nbsp;&nbsp;&nbsp;RMQ (Range Minimum/Maximun Query),即区间最值问题；<p></p>
<p></p><h1>Algorithm</h1><br>ST (Sparse Table,稀疏表) Algorithm,O(nlogn)预处理,O(1)查询；<p></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[位运算理解及运用(未填完)]]></title>
      <url>http://polebug.github.io/2016/08/13/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%90%86%E8%A7%A3%E5%8F%8A%E8%BF%90%E7%94%A8-%E6%9C%AA%E5%A1%AB%E5%AE%8C/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;最近渐渐发现位运算的重要性，鉴于之前没有好好学习位运算，打算在此慢慢补充位运算的学习资料以及算法上的运用，帮助自己更深的理解位运算的本质并熟练掌握<br><a id="more"></a></p>
<p></p><h1>学习资料</h1><br><a href="https://zh.wikipedia.org/wiki/%E4%BD%8D%E6%93%8D%E4%BD%9C" target="_blank" rel="external">对于基本位运算的解释(维基百科)</a><p></p>
<p></p><h1>算法上的运用</h1><br>(待添加相关模板)<br><a href="http://polebug.science/2016/08/13/%E5%AF%B9%E4%BA%8ERMQ%E9%97%AE%E9%A2%98%E7%9A%84%E7%90%86%E8%A7%A3%E5%8F%8A%E8%BF%90%E7%94%A8/" target="_blank" rel="external">RMQ问题的ST算法</a><br>快速幂<p></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HDOJ 5821 Ball (16多校day8 1001)]]></title>
      <url>http://polebug.github.io/2016/08/13/HDOJ-5821-Ball-16%E5%A4%9A%E6%A0%A1day8-1001/</url>
      <content type="html"><![CDATA[<p></p><h2>题意</h2><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5821" target="_blank" rel="external">题目传送门</a><br>&nbsp;&nbsp;&nbsp;&nbsp;题意：有n个盒子，每个盒子最多装下一个球。用a[i]表示每个盒子中球的状态。现在给出m个区间，可以在给出的区间任意改变a[i]的顺序。询问能否使a[i]等于b[i]。<br><a id="more"></a><p></p>
<p></p><h2>题解</h2><br>&nbsp;&nbsp;&nbsp;&nbsp;看了<a href="http://bestcoder.hdu.edu.cn/blog/" target="_blank" rel="external">官方题解</a>才知道是贪心，觉得很巧妙，在此胡口一波。<p></p>
<p></p><h3>下标原理</h3><br>&nbsp;&nbsp;&nbsp;&nbsp;要使a[i]等于b[i]，球的颜色是一个很大的干扰。然而，对于同色球而言，（例如有4个全为红色的球），标记为1,2,3,4.从a[i]到b[i]一定存在一种方案，使得这个顺序不发生改变。也就是说，同色球可以处理成若干个不同色球。<br>&nbsp;&nbsp;&nbsp;&nbsp;对于整个a[i]而言，即有n个不同色球。<p></p>
<p></p><h3>贪心的实现</h3><br>&nbsp;&nbsp;&nbsp;&nbsp;首先，分别将a[i],b[i]标记为1.2.3…n；根据a[i],b[i]球的状态进行sort排序（即是否有球以及球的颜色）；<br>&nbsp;&nbsp;&nbsp;&nbsp;其次，对a[i]重编号：进行逐一对比，若a[i]和b[i]的状态相同，则令c[a[i]标记]=b[i]标记；（c[i]即为a[i]重编号后的标记）<br>&nbsp;&nbsp;&nbsp;&nbsp;最后，在给出的区间进行sort排序。验证c[i]是否等于b[i]，即c[i]是否满足1.2.3…n;<p></p>
<p></p><h2>代码如下</h2><br>亲测AC<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> N <span class="number">100000</span>+<span class="number">10</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> c[N];</span><br><span class="line">pair &lt;<span class="keyword">int</span> ,<span class="keyword">int</span>&gt; A[N],B[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            A[i].first=x;</span><br><span class="line">            A[i].second=i; </span><br><span class="line">        &#125;</span><br><span class="line">        sort(A+<span class="number">1</span>,A+<span class="number">1</span>+n);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            B[i].first=x;</span><br><span class="line">            B[i].second=i;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(B+<span class="number">1</span>,B+<span class="number">1</span>+n);<span class="comment">//将a[i],b[i]编号并排序 </span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n &amp;&amp; flag;++i)</span><br><span class="line">            <span class="keyword">if</span>(A[i].first!=B[i].first) flag=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> c[A[i].second]=B[i].second;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将a[i]重编号</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="keyword">int</span> x,y;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">            sort(c+x,c+y+<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="comment">//在给定的区间排序 </span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n &amp;&amp; flag;++i)</span><br><span class="line">            <span class="keyword">if</span>(c[i]!=i) flag=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//验证最后的标号是否满足1.2.3...n </span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;多校渐入尾声，晚上翻了翻各种多校敲的代码，自觉多校虽难但同样受益匪浅。（希望不是最后一次多校啊啊啊）最近想整理多校题,BC,CF代码，写写题解<br>&nbsp;&nbsp;&nbsp;&nbsp;重新开始写题解，其中一个原因是自己不想把所敲的代码扔的到处都是，最后不知所云；另一个原因是，我最近意识到自己思考题目以及赛后对于题解的利用有问题。我记得我上次问帅副题目，总是问这个算法具体是啥样的啊怎么敲啊，结果帅副说你首先要明白这样做为什么是对的，再去想如何实现。之后想了想，确实有道理。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;最后，以上若有不对的地方，欢迎指正。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hello world]]></title>
      <url>http://polebug.github.io/2016/01/08/hello-world/</url>
      <content type="html"><![CDATA[<p></p><h1>对于新主题的各种测试</h1><br>本站于8.5开始采用yelee主题，相关安装以及使用说明详见 <a href="http://moxfive.coding.me/yelee" target="_blank" rel="external">http://moxfive.coding.me/yelee</a><br>本文用于各种text，无实质性内容<br><a id="more"></a><p></p>
<p></p><h2>代码高亮测试</h2><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hello</span> world</span><br></pre></td></tr></table></figure><p></p>
<p></p><h2>引用测试</h2><p></p>
<blockquote>
<p>interesting</p>
</blockquote>
<p></p><h2>完成文章目录相关测试</h2><br>详见左侧的文章目录相关测试<p></p>
<p></p><h1>说点啥</h1><br>这个主题真是太棒了，几乎完美<br>主要是三个方面做的很棒：1.风格，样式舒服； 2.作者教程写的很详细了，避免了以前改参数之后莫名error的情况。再次感谢一下；3.自由度高，包含了我想添加的一切东西，包括多说，百度分享，不蒜子统计，还有像文章目录这样东西；<br>总之，向作者比心~<p></p>
<p>最后就是，终于有写题解的地方了（高亮也ok，万事俱备啦）<br>博客园那货就暂且扔了吧，最近老被别人翻出来，我都不敢写东西了2333</p>
]]></content>
    </entry>
    
  
  
</search>
